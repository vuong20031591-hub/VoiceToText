"""
Build script ƒë·ªÉ t·∫°o file .exe cho Voice to Text Application
"""
# -*- coding: utf-8 -*-
import os
import sys
import io

# Force UTF-8 encoding for console output
sys.stdout = io.TextIOWrapper(sys.stdout.buffer, encoding='utf-8', errors='replace')
sys.stderr = io.TextIOWrapper(sys.stderr.buffer, encoding='utf-8', errors='replace')
import shutil
import subprocess
from pathlib import Path

def clean_build():
    """D·ªçn d·∫πp th∆∞ m·ª•c build c≈©"""
    print("[1/4] Don dep thu muc build cu...")
    
    dirs_to_clean = ['build', 'dist', '__pycache__']
    for dir_name in dirs_to_clean:
        if os.path.exists(dir_name):
            shutil.rmtree(dir_name)
            print(f"   [OK] Da xoa {dir_name}")
    
    # X√≥a file .spec c≈©
    spec_files = [f for f in os.listdir('.') if f.endswith('.spec')]
    for spec_file in spec_files:
        os.remove(spec_file)
        print(f"   [OK] Da xoa {spec_file}")

def install_pyinstaller():
    """C√†i ƒë·∫∑t PyInstaller n·∫øu ch∆∞a c√≥"""
    print("[2/4] Kiem tra PyInstaller...")
    
    try:
        import PyInstaller
        print("   [OK] PyInstaller da duoc cai dat")
    except ImportError:
        print("   [INFO] Dang cai dat PyInstaller...")
        subprocess.check_call([sys.executable, "-m", "pip", "install", "pyinstaller"])
        print("   [OK] Da cai dat PyInstaller")

def create_exe():
    """T·∫°o file .exe (API keys embedded)"""
    print("üî® ƒêang t·∫°o file .exe v·ªõi API keys embedded...")
    
    # PyInstaller command
    # NOTE: API keys ƒë√£ ƒë∆∞·ª£c hardcode trong app.py
    # PyInstaller v6.0+ kh√¥ng h·ªó tr·ª£ --key encryption n·ªØa
    cmd = [
        "python", "-m", "PyInstaller",
        "--onefile",                    # T·∫°o m·ªôt file exe duy nh·∫•t
        "--windowed",                   # Kh√¥ng hi·ªÉn th·ªã console window
        "--name=VoiceToText",           # T√™n file exe
        "--add-data=config.json;.",     # Th√™m config.json (optional backup)
        "--hidden-import=groq",
        "--hidden-import=requests",
        "--hidden-import=customtkinter",
        "--hidden-import=pynput",
        "--hidden-import=pyaudio",
        "--hidden-import=pyperclip",
        "--hidden-import=numpy",
        "--collect-all=customtkinter",
        "--noupx",                      # Kh√¥ng d√πng UPX ƒë·ªÉ kh√≥ reverse h∆°n
        "main.py"
    ]
    
    try:
        subprocess.check_call(cmd)
        print("    ƒê√£ t·∫°o file .exe th√†nh c√¥ng!")
        return True
    except subprocess.CalledProcessError as e:
        print(f"    L·ªói t·∫°o file .exe: {e}")
        return False

def optimize_exe():
    """T·ªëi ∆∞u file .exe"""
    print("‚ö° T·ªëi ∆∞u file .exe...")
    
    exe_path = Path("dist/VoiceToText.exe")
    if exe_path.exists():
        size_mb = exe_path.stat().st_size / (1024 * 1024)
        print(f"   üìè K√≠ch th∆∞·ªõc file: {size_mb:.1f} MB")
        
        # Copy config.json v√†o th∆∞ m·ª•c dist
        if os.path.exists("config.json"):
            shutil.copy2("config.json", "dist/")
            print("   ‚úÖ ƒê√£ copy config.json")
        
        # T·∫°o th∆∞ m·ª•c release
        release_dir = Path("release")
        release_dir.mkdir(exist_ok=True)
        
        # Copy file exe v√† config v√†o release
        shutil.copy2(exe_path, release_dir / "VoiceToText.exe")
        shutil.copy2("config.json", release_dir / "config.json")
        shutil.copy2("README.md", release_dir / "README.md")
        
        print(f"  File release ƒë√£ s·∫µn s√†ng trong th∆∞ m·ª•c: {release_dir}")
        print(f"  Ch·∫°y ·ª©ng d·ª•ng: {release_dir / 'VoiceToText.exe'}")
        
        return True
    else:
        print("    Kh√¥ng t√¨m th·∫•y file .exe")
        return False

def main():
    """Main build function"""
    print("B·∫ÆT ƒê·∫¶U BUILD VOICE TO TEXT APPLICATION")
    print("=" * 50)
    
    try:
        # 1. D·ªçn d·∫πp
        clean_build()
        print()
        
        # 2. C√†i ƒë·∫∑t PyInstaller
        install_pyinstaller()
        print()
        
        # 3. T·∫°o exe
        if create_exe():
            print()
            
            # 4. T·ªëi ∆∞u
            if optimize_exe():
                print()
                print("BUILD TH√ÄNH C√îNG!")
                print("=" * 50)
                print("File .exe ƒë√£ ƒë∆∞·ª£c t·∫°o trong th∆∞ m·ª•c 'release'")
                print("Ch·∫°y: release/VoiceToText.exe")
                print("C·∫•u h√¨nh: release/config.json")
                print()
                print("   H∆Ø·ªöNG D·∫™N S·ª¨ D·ª§NG:")
                print("   1. Ch·∫°y VoiceToText.exe")
                print("   2. Nh·∫•n gi·ªØ Ctrl+Alt ƒë·ªÉ ghi √¢m")
                print("   3. N√≥i v√†o microphone")
                print("   4. Th·∫£ hotkey ƒë·ªÉ nh·∫≠n d·∫°ng")
                print("   5. VƒÉn b·∫£n t·ª± ƒë·ªông d√°n!")
            else:
                print(" L·ªói t·ªëi ∆∞u file .exe")
                return False
        else:
            print(" L·ªói t·∫°o file .exe")
            return False
            
    except Exception as e:
        print(f" L·ªói build: {e}")
        return False
    
    return True

if __name__ == "__main__":
    success = main()
    if not success:
        sys.exit(1)
